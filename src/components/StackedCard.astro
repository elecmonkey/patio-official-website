---
interface Props {
  title: string;
  description?: string;
  accent?: boolean;
  class?: string;
  style?: string;
  [key: string]: any;
}

const { title, description, accent = false, class: className = '', style, ...rest } = Astro.props as Props;
const hasExtra = Astro.slots.has('extra');
---

<article
  {...rest}
  class={`relative break-inside-avoid group mb-10 ${className}`.trim()}
  style={style}
>
  <div
    class={`pointer-events-none absolute inset-0 transition-transform duration-300 ease-out ${accent ? 'translate-x-1.5 translate-y-1.5 border-2 border-primary/50 bg-primary/10 group-hover:translate-x-2 group-hover:translate-y-2' : 'translate-x-1 translate-y-1 border border-base-300/70 bg-base-100/60 group-hover:translate-x-1.5 group-hover:translate-y-1.5'}`}
  ></div>
  <div
    class={`relative bg-base-100 transition-transform duration-300 ease-out shadow-xl group-hover:-translate-y-1 group-hover:-translate-x-1 ${accent ? 'border-2 border-primary/60 shadow-2xl' : 'border border-base-300'}`}
  >
    <div class="p-6 sm:p-8 space-y-4">
      <div class={`flex items-start gap-3 ${hasExtra ? 'justify-between' : 'justify-center'}`}>
        <h3 class={`text-lg sm:text-xl font-semibold leading-tight ${accent ? 'text-primary' : 'text-base-content/90'} ${hasExtra ? '' : 'text-center'}`}>{title}</h3>
        {hasExtra ? <slot name="extra" /> : null}
      </div>
      {description ? <p class="text-sm sm:text-base opacity-80 leading-relaxed">{description}</p> : null}
      <slot />
    </div>
  </div>
</article>
